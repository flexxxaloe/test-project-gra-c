В ходе своего проектного задания вы будете использовать теоретические знания из области математики в контексте приложения для реализации алгоритма на языке Си. Они сосредоточены на области обработки изображений, в которой пиксельные изображения, обычно используемые цифровыми камерами, используются в качестве входных данных для определенных алгоритмов, и математические соображения становятся понятными.Реализуемые алгоритмы используются для преобразования цветного изображения в оттенки серого с последующей настройкой яркости и контрастности.

Функционально мы определяем цветовой пиксель в положении(x,y)рамки изображения, вектор с тремя элементами для цветовых каналов красный (R), зеленый (G) и синий (B):P(x,y)=Исходное RGB-изображение(x,y)∈D={0,...,Ширина-1}×{0,...,высота-1}
Сначала мы рассмотрим преобразование оттенков серого: преобразование пикселя в оттенки серого происходит путем вычисления средневзвешенного значения D средних коэффициентов,bundc:D=a·R+b·G+c·Ba+b+c
Значения r g bнаходятся в пределах от 0 до 255. a b c  коэффициенты являющиеся числами с плавающей точкой мы можем сами определить их значения Полученное значение Д будет присвоено текущему пикселю Q x y 
Затем изображение в оттенках серого должно быть подвергнуто регулировке яркости и контрастности.
Чтобы вычислить изображение с новой яркостью, значение оттенков серого сдвигается на константу∈[-255,255], где положительные числа означают, что изображение становится светлее, а отрицательные числа означают, что изображение становится темнее.
Это означает, что для каждого пикселя в градациях серого действительноq'(x,y)= (255-0)(Q(x,y)+l)Чтобы настроить контрастность изображения, сначала вычисляется среднее значение всех (уже скорректированных по яркости) значений в градациях серого изображения, а затем значение стандартного отклонения σ: 2= Var[Q′] =1|D|∑(x,y)∈D(Q′(x,y)−μ)
Затем значения сжимаются или растягиваются относительно среднего значения на коэффициент K/σ(где в случае K=σ= 0 должно иметь место k/σ= 0), чтобы получить более контрастное (k = 0) или более контрастное изображение (|k|= 255 Q′′(x,y)= clamp2550(kσ·Q′(x,y)+ (1−kσ)·μ

Решение заключается в том чтобы пребрать каждый пиксель и установить для него нужные значения исходя из его начальных значений R G B
Можно сделать это через SImd перебирая сразу по несколько пикселей за итерацию.

Было проверено что реализация функции корня( то есть реализация без сложных математиечских вычислений) почти не меняет значение стандартного отклонения σ отличия незначительные и не сказываются на результате. симд реализация оказалась такой же как и обычная по времени выполнения не зависимо от размера картинки. исходя из формул можно сделать вывод что кроме размера картинки на перформанс существенно больше ничего не влияет. удивительно что простая реализация без библиотечных функций оказалась в два раза быстрее при всех размерах картинок. причина таких результатов в том, (здесь надо написать в чем вероятно причина).




















В процессе выполнения проектного задания по обработке изображений на языке программирования C, мы сталкиваемся с преобразованиями цветных пикселей в оттенки серого и последующей настройкой яркости и контрастности. Эти операции выполняются на пиксельном уровне, где каждый пиксель характеризуется тремя цветовыми каналами: красным (R), зеленым (G) и синим (B).

Для начала преобразования в оттенки серого используется средневзвешенное значение коэффициентов R, G и B. Этот процесс осуществляется с помощью уравнения D = a * R + b * G + c * B, где a, b и c - весовые коэффициенты, и D представляет собой значение оттенка серого для текущего пикселя.

Далее, производится регулировка яркости путем сдвига значений оттенков серого на константу в пределах [-255, 255]. Положительные значения делают изображение светлее, а отрицательные - темнее.

Для настройки контрастности вычисляется среднее значение и стандартное отклонение отрегулированных значений оттенков серого. Затем значения сжимаются или растягиваются относительно среднего значения на коэффициент K/σ, где K представляет контрастность. Таким образом, получаем более контрастное изображение.

Оптимизация выполнена с использованием SIMD (Single Instruction, Multiple Data), позволяющего обрабатывать несколько пикселей за одну итерацию. Было отмечено, что простая реализация без библиотечных функций оказалась в два раза быстрее. Этот феномен может быть объяснен тем, что простота реализации позволяет избежать накладных расходов на вызов библиотечных функций, что особенно актуально на больших объемах данных.

Важно отметить, что оптимизация функции корня не оказывает существенного влияния на результат. Скорее всего, это связано с тем, что стандартное отклонение σ обладает незначительной чувствительностью к изменениям значений.

В целом, производительность алгоритма зависит в основном от размера изображения, и простота реализации может оказаться ключевым фактором в достижении эффективности выполнения.
